import { FC, Ref } from "react";
import { GridNum, Point, ViewBoard } from "gennan-core";
import { Mode } from "../types";
import { EditModeInfo } from "./Container";
declare type Props = {
    mode: Mode;
    editModeInfos: Array<EditModeInfo>;
    gridNum?: GridNum;
    sideNum: number;
    fulcrumPoint?: Point;
    viewBoard: ViewBoard;
    gameName?: string;
    gameDate?: string;
    gameResult?: string;
    komi?: string;
    blackPlayer?: string;
    whitePlayer?: string;
    comment?: string;
    isUndoIconActive: boolean;
    isPlayIconActive: boolean;
    isTurnedPlayIconActive: boolean;
    handleCommentChange: (c: string) => void;
    handleGameNameChange: (gn: string) => void;
    handleGameDateChange: (gd: string) => void;
    handleGameResultChange: (result: string) => void;
    handleKomiChange: (komi: string) => void;
    handleBlackPlayerChange: (p: string) => void;
    handleWhitePlayerChange: (p: string) => void;
    onClickPoint?: (p: Point) => void;
    onClickUndoIcon: () => void;
    playForward: () => void;
    playForwardTimes: () => void;
    playBackward: () => void;
    playBackwardTimes: () => void;
    onClickNextButton: () => void;
    startSelectMagnification: () => void;
    cancelSelectMagnification: () => void;
    rangeSideNum: number;
    setRangeSideNum: (n: number) => void;
    rangeFulcrumPoint: Point;
    setRangeFulcrumPoint: (p: Point) => void;
    previewMagnification: () => void;
    cancelPreviewMagnification: () => void;
    isPreviewing: boolean;
    confirmMagnification: () => void;
    isScaleVisible?: boolean;
    toggleIsScaleVisible: () => void;
    takeSnapshot: () => void;
    downloadSgf: () => void;
    importSgf: (sgf: string) => void;
    svgBoardRef: Ref<SVGSVGElement>;
    downloadBoardImage: () => Promise<void>;
};
export declare const Presenter: FC<Props>;
export {};
